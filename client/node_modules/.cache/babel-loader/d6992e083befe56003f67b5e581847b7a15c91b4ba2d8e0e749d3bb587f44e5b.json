{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n\n// export default function Productpage() {\n//   const [products, setProducts] = useState([]);\n\n//   // Fetch product data from the server\n//   useEffect(() => {\n//     fetch(\"http://localhost:5000/products\")\n//       .then((response) => response.json())\n//       .then((data) => setProducts(data))\n//       .catch((error) => console.error(\"Error fetching products:\", error));\n//   }, []);\n\n//   const handleAddToCart = (product) => {\n//     alert(`Added ${product.productName} to cart!`);\n//   };\n\n//   const handleBuyNow = (product) => {\n//     alert(`Buying ${product.productName} for $${product.price}`);\n//   };\n\n//   return (\n//     <div>\n//       <h1>PRODUCT PAGE</h1>\n//       {products.length > 0 ? (\n//         <div\n//           style={{\n//             display: \"flex\",\n//             flexWrap: \"wrap\",\n//             gap: \"20px\",\n//             padding: \"10px\",\n//           }}\n//         >\n//           {products.map((product) => (\n//             <div\n//               key={product.productId}\n//               style={{\n//                 minWidth: \"200px\",\n//                 textAlign: \"center\",\n//                 flex: \"1 0 calc(14.28% - 20px)\", // 7 products per row\n//                 maxWidth: \"14.28%\",\n//               }}\n//             >\n//               <h3>{product.productName}</h3>\n//               <p>Price: ${product.price}</p>\n//               <img\n//                 src={product.imageUrl}\n//                 alt={product.productName}\n//                 style={{ width: \"200px\", height: \"200px\", objectFit: \"cover\" }}\n//               />\n//               <div style={{ marginTop: \"10px\" }}>\n//                 <button\n//                   onClick={() => handleAddToCart(product)}\n//                   style={{\n//                     marginRight: \"10px\",\n//                     padding: \"5px 10px\",\n//                     cursor: \"pointer\",\n//                     backgroundColor:\"#d90166\",\n//                     borderRadius:\"15px\"\n//                   }}\n//                 >\n//                   Add to Cart\n//                 </button>\n//                 <button\n//                   onClick={() => handleBuyNow(product)}\n//                   style={{\n//                     padding: \"5px 10px\",\n//                     cursor: \"pointer\",\n//                     backgroundColor:\"#006400\",\n//                      borderRadius:\"15px\"\n//                   }}\n//                 >\n//                   Buy Now\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       ) : (\n//         <p>No products available.</p>\n//       )}\n//     </div>\n//   );\n// }\n\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst multer = require(\"multer\");\nconst {\n  MongoClient\n} = require(\"mongodb\");\nconst path = require(\"path\");\nconst fs = require(\"fs\");\nconst app = express();\nconst PORT = 5000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(\"/uploads2\", express.static(\"uploads2\")); // Serve uploaded images\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = \"uploads2/\";\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir);\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage\n});\n\n// MongoDB configuration\nconst uri = \"mongodb://127.0.0.1:27017\";\nconst client = new MongoClient(uri);\nlet db;\n\n// Connect to MongoDB\nclient.connect().then(() => {\n  db = client.db(\"mydb\");\n  console.log(\"Connected to MongoDB\");\n}).catch(err => console.error(\"MongoDB connection error:\", err));\n\n// Route to handle adding product to the cart\napp.post(\"/addToCart\", upload.single(\"imageUrl\"), async (req, res) => {\n  try {\n    const {\n      productName,\n      price\n    } = req.body;\n    const imageUrl = req.file ? `http://localhost:${PORT}/uploads2/${req.file.filename}` : req.body.imageUrl;\n    const collection = db.collection(\"Addtocart\");\n\n    // Insert product into the Addtocart collection\n    await collection.insertOne({\n      productName,\n      price,\n      imageUrl\n    });\n    res.status(200).json({\n      message: \"Product added to cart successfully\"\n    });\n  } catch (err) {\n    console.error(\"Error adding product to cart:\", err);\n    res.status(500).json({\n      error: \"Failed to add product to cart\"\n    });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","multer","MongoClient","path","fs","app","PORT","use","json","static","storage","diskStorage","destination","req","file","cb","uploadDir","existsSync","mkdirSync","filename","Date","now","extname","originalname","upload","uri","client","db","connect","then","console","log","catch","err","error","post","single","res","productName","price","body","imageUrl","collection","insertOne","status","message","listen"],"sources":["C:/Users/ASUS/Downloads/testing/chandan-enterprises/src/Productpage.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// export default function Productpage() {\r\n//   const [products, setProducts] = useState([]);\r\n\r\n//   // Fetch product data from the server\r\n//   useEffect(() => {\r\n//     fetch(\"http://localhost:5000/products\")\r\n//       .then((response) => response.json())\r\n//       .then((data) => setProducts(data))\r\n//       .catch((error) => console.error(\"Error fetching products:\", error));\r\n//   }, []);\r\n\r\n//   const handleAddToCart = (product) => {\r\n//     alert(`Added ${product.productName} to cart!`);\r\n//   };\r\n\r\n//   const handleBuyNow = (product) => {\r\n//     alert(`Buying ${product.productName} for $${product.price}`);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>PRODUCT PAGE</h1>\r\n//       {products.length > 0 ? (\r\n//         <div\r\n//           style={{\r\n//             display: \"flex\",\r\n//             flexWrap: \"wrap\",\r\n//             gap: \"20px\",\r\n//             padding: \"10px\",\r\n//           }}\r\n//         >\r\n//           {products.map((product) => (\r\n//             <div\r\n//               key={product.productId}\r\n//               style={{\r\n//                 minWidth: \"200px\",\r\n//                 textAlign: \"center\",\r\n//                 flex: \"1 0 calc(14.28% - 20px)\", // 7 products per row\r\n//                 maxWidth: \"14.28%\",\r\n//               }}\r\n//             >\r\n//               <h3>{product.productName}</h3>\r\n//               <p>Price: ${product.price}</p>\r\n//               <img\r\n//                 src={product.imageUrl}\r\n//                 alt={product.productName}\r\n//                 style={{ width: \"200px\", height: \"200px\", objectFit: \"cover\" }}\r\n//               />\r\n//               <div style={{ marginTop: \"10px\" }}>\r\n//                 <button\r\n//                   onClick={() => handleAddToCart(product)}\r\n//                   style={{\r\n//                     marginRight: \"10px\",\r\n//                     padding: \"5px 10px\",\r\n//                     cursor: \"pointer\",\r\n//                     backgroundColor:\"#d90166\",\r\n//                     borderRadius:\"15px\"\r\n//                   }}\r\n//                 >\r\n//                   Add to Cart\r\n//                 </button>\r\n//                 <button\r\n//                   onClick={() => handleBuyNow(product)}\r\n//                   style={{\r\n//                     padding: \"5px 10px\",\r\n//                     cursor: \"pointer\",\r\n//                     backgroundColor:\"#006400\",\r\n//                      borderRadius:\"15px\"\r\n//                   }}\r\n//                 >\r\n//                   Buy Now\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       ) : (\r\n//         <p>No products available.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst multer = require(\"multer\");\r\nconst { MongoClient } = require(\"mongodb\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(\"/uploads2\", express.static(\"uploads2\")); // Serve uploaded images\r\n\r\n// Configure multer for file uploads\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    const uploadDir = \"uploads2/\";\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir);\r\n    }\r\n    cb(null, uploadDir);\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + path.extname(file.originalname));\r\n  },\r\n});\r\n\r\nconst upload = multer({ storage });\r\n\r\n// MongoDB configuration\r\nconst uri = \"mongodb://127.0.0.1:27017\";\r\nconst client = new MongoClient(uri);\r\nlet db;\r\n\r\n// Connect to MongoDB\r\nclient.connect()\r\n  .then(() => {\r\n    db = client.db(\"mydb\");\r\n    console.log(\"Connected to MongoDB\");\r\n  })\r\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// Route to handle adding product to the cart\r\napp.post(\"/addToCart\", upload.single(\"imageUrl\"), async (req, res) => {\r\n  try {\r\n    const { productName, price } = req.body;\r\n    const imageUrl = req.file\r\n      ? `http://localhost:${PORT}/uploads2/${req.file.filename}`\r\n      : req.body.imageUrl;\r\n\r\n    const collection = db.collection(\"Addtocart\");\r\n\r\n    // Insert product into the Addtocart collection\r\n    await collection.insertOne({ productName, price, imageUrl });\r\n\r\n    res.status(200).json({ message: \"Product added to cart successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Error adding product to cart:\", err);\r\n    res.status(500).json({ error: \"Failed to add product to cart\" });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}